// <auto-generated />
using System;
using App.Models.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230919185930_AddedUserId")]
    partial class AddedUserId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Models.DbContext.CaseSheet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedSound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Addiction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appetite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Auscultation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bladder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bowel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BowelSounds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardiovascularSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clubbing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cyanosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DilatedVeins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidThrill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GCS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardingRigidity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryOfPresentingIllness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icterus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inspection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalisedSweling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lymphadenopathy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Murmur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pallor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("PedalEdema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerAbdomen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percussion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pulpation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pulsations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespiratorySystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("S1S2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScarMarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftingDullness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sleep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpO2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temprature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TendernessRebound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Umbilicus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisiblePeristalsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vitals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("complaintsOf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("CaseSheet");
                });

            modelBuilder.Entity("App.Models.DbContext.Discharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdviceOndischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investigations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JuniorResident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("SeniorResident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentGiven")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Discharge");
                });

            modelBuilder.Entity("App.Models.DbContext.InvestigationImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodSugar_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBC_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CECT_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ERCP_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndoscopyLowerGI_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndoscopyUpperGI_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtTtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FNAC_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IVP_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InvestigationID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LFT_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LipidProfile_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCU_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRCP_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRI_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherTh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PETCT_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("RFT_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RGU_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceptorStatus_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SONOMMOGRAPHY_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerumElectrolytes_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TFT_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TSPAG_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrucutBiopsy_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TumorMarkers_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USG_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationID");

                    b.ToTable("InvestigationImages");
                });

            modelBuilder.Entity("App.Models.DbContext.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Anaesthetist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Antibiotics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Closure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Findings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpertingSurgeon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOperativeInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecimensSentFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepsOfOperation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("App.Models.DbContext.Progress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("RR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpO2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vitals")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("App.Models.EntityModels.Address", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("App.Models.EntityModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("App.Models.EntityModels.Doctor", b =>
                {
                    b.Property<long>("Dr_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dr_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Dr_ID");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("App.Models.EntityModels.Investigation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodSugar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CECT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ERCP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndoscopyLowerGI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndoscopyUpperGI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FNAC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IVP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LFT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LipidProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRCP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MRI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherTh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PETCT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("RFT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RGU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceptorStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SONOMMOGRAPHY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerumElectrolytes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TFT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TSPAG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrucutBiopsy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TumorMarkers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Investigation");
                });

            modelBuilder.Entity("App.Models.EntityModels.Patient", b =>
                {
                    b.Property<long>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Address_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CADSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoMorbity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Daignosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Dr_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JuniorResident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OPDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherTh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorResident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.HasIndex("Address_ID");

                    b.HasIndex("Dr_ID");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("App.Models.EntityModels.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("App.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App.Models.DbContext.CaseSheet", b =>
                {
                    b.HasOne("App.Models.EntityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.DbContext.Discharge", b =>
                {
                    b.HasOne("App.Models.EntityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.DbContext.InvestigationImages", b =>
                {
                    b.HasOne("App.Models.EntityModels.Investigation", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.DbContext.Operation", b =>
                {
                    b.HasOne("App.Models.EntityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.DbContext.Progress", b =>
                {
                    b.HasOne("App.Models.EntityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.EntityModels.Investigation", b =>
                {
                    b.HasOne("App.Models.EntityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.EntityModels.Patient", b =>
                {
                    b.HasOne("App.Models.EntityModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.EntityModels.Doctor", "Consultant")
                        .WithMany()
                        .HasForeignKey("Dr_ID");
                });

            modelBuilder.Entity("App.Models.EntityModels.SubCategory", b =>
                {
                    b.HasOne("App.Models.EntityModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
